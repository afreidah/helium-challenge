# -----------------------------------------------------------------------------
# CI/CD WORKFLOW
# -----------------------------------------------------------------------------
# Pull Request: Run CI checks (format, validate, test, plan, cost)
# Merge to main: Same as PR, then WAIT FOR APPROVAL before apply
#
# SETUP REQUIRED REVIEWERS:
#   1. Go to repo Settings -> Environments
#   2. Create environment named "production"
#   3. Add required reviewers (at least 1)
#   4. Save - apply job will now wait for approval before running
# -----------------------------------------------------------------------------

name: CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
  TF_IN_AUTOMATION: true
  TERRAGRUNT_LOG_LEVEL: error
  TF_LOG: error
  TG_LOG_LEVEL: error
  TERRAGRUNT_PROVIDER_CACHE: 1
  TERRAGRUNT_PROVIDER_CACHE_DIR: /tmp/terragrunt-provider-cache

jobs:
  # ---------------------------------------------------------------------------
  # CI + PLAN + COST (runs on PR and push to main)
  # ---------------------------------------------------------------------------
  ci-plan-cost:
    name: CI + Plan + Cost
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t helium-ci:latest .

      - name: Run CI checks (includes plan and cost)
        run: |
          docker run --rm \
            -e HOME=/tmp \
            -e AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY \
            -e AWS_DEFAULT_REGION \
            -e INFRACOST_API_KEY \
            --user $(id -u):$(id -g) \
            -v $(pwd):/workspace \
            -w /workspace \
            helium-ci:latest \
            bash -c 'git config --global --add safe.directory /workspace && make ci'

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plans-and-costs
          path: .ci/
          retention-days: 7

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const planPath = '.ci/plan/plan-production.txt';
            const costProdPath = '.ci/plan/cost-production.txt';
            const costStagingPath = '.ci/plan/cost-staging.txt';

            let plan = 'Plan not found';
            let summary = '';

            if (fs.existsSync(planPath)) {
              const fullPlan = fs.readFileSync(planPath, 'utf8');

              // Extract ALL plan summaries and sum them
              const planMatches = fullPlan.matchAll(/Plan: (\d+) to add, (\d+) to change, (\d+) to destroy/g);
              let totalAdd = 0, totalChange = 0, totalDestroy = 0;
              for (const match of planMatches) {
                totalAdd += parseInt(match[1]);
                totalChange += parseInt(match[2]);
                totalDestroy += parseInt(match[3]);
              }
              
              if (totalAdd > 0 || totalChange > 0 || totalDestroy > 0) {
                summary = `**Plan Summary:** ${totalAdd} to add, ${totalChange} to change, ${totalDestroy} to destroy\n\n`;
              }

              // Truncate plan if too long
              const maxLength = 150000;
              plan = fullPlan.slice(0, maxLength);
              if (fullPlan.length > maxLength) {
                plan += '\n\n[Plan output truncated - download artifacts for full output]';
              }
            }

            const costProd = fs.existsSync(costProdPath) ? fs.readFileSync(costProdPath, 'utf8').slice(0, 10000) : 'Cost estimate not available';
            const costStaging = fs.existsSync(costStagingPath) ? fs.readFileSync(costStagingPath, 'utf8').slice(0, 10000) : 'Cost estimate not available';

            const body = '## Terraform Plan\n\n' + summary + 
                         '<details><summary>View full plan</summary>\n\n```\n' + plan + '\n```\n</details>\n\n' +
                         '## Cost Estimates\n\n' +
                         '<details><summary>Production</summary>\n\n```\n' + costProd + '\n```\n</details>\n\n' +
                         '<details><summary>Staging</summary>\n\n```\n' + costStaging + '\n```\n</details>\n\n' +
                         '---\n[Download full artifacts](' + context.payload.repository.html_url + '/actions/runs/' + context.runId + ')';

            const marker = '<!-- terragrunt-results -->';
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const comments = await github.rest.issues.listComments({ owner, repo, issue_number });
            const existing = comments.data.find(c => c.body && c.body.includes(marker));
            const finalBody = marker + '\n' + body;

            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body: finalBody });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number, body: finalBody });
            }

  # ---------------------------------------------------------------------------
  # APPLY (only runs on merge to main, requires manual approval)
  # COMMENTED OUT - uncomment when ready to enable auto-apply
  # ---------------------------------------------------------------------------
  # apply:
  #   name: Apply Infrastructure
  #   runs-on: ubuntu-latest
  #   needs: ci-plan-cost
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   environment:
  #     name: production
  #
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #
  #     - name: Build Docker image
  #       run: docker build -t helium-ci:latest .
  #
  #     - name: Apply infrastructure
  #       run: |
  #         docker run --rm \
  #           -e HOME=/tmp \
  #           -e AWS_ACCESS_KEY_ID \
  #           -e AWS_SECRET_ACCESS_KEY \
  #           -e AWS_DEFAULT_REGION \
  #           --user $(id -u):$(id -g) \
  #           -v $(pwd):/workspace \
  #           -w /workspace \
  #           helium-ci:latest \
  #           bash -c 'git config --global --add safe.directory /workspace && cd production && terragrunt run --all -- apply -auto-approve'
