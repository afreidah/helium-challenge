---
# Example Deployment showing how to use ExternalSecrets in your application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-app
  namespace: app
  labels:
    app: example-app
    environment: production
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: example-app
  template:
    metadata:
      labels:
        app: example-app
        environment: production
      annotations:
        # Force pod restart when secrets change
        checksum/aurora-credentials: "updated-by-external-secrets"
        checksum/app-config: "updated-by-external-secrets"
    spec:
      serviceAccountName: default
      
      # Security context for the pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      containers:
        - name: app
          image: your-registry/your-app:latest
          imagePullPolicy: Always
          
          # Container security context
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          
          # Environment variables
          env:
            - name: ENVIRONMENT
              value: "production"
            - name: APP_PORT
              value: "8080"
          
          # Load secrets as environment variables
          envFrom:
            - secretRef:
                name: aurora-app-credentials
          
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /app/cache
          
          # Health checks
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          
          # Resource limits
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi
      
      volumes:
        # Ephemeral volumes for writable directories
        - name: tmp
          emptyDir: {}
        - name: cache
          emptyDir: {}
      
      # Pod affinity rules for HA
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - example-app
                topologyKey: kubernetes.io/hostname
---
# Service for the example app
apiVersion: v1
kind: Service
metadata:
  name: example-app
  namespace: app
  labels:
    app: example-app
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: example-app
---
# HorizontalPodAutoscaler for the example app
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: example-app
  namespace: app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: example-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Percent
          value: 100
          periodSeconds: 30
        - type: Pods
          value: 2
          periodSeconds: 30
      selectPolicy: Max
