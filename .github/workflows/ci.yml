name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main, staging, production]
  push:
    branches: ['**']  # ensure pushes to PR branches also trigger

permissions:
  contents: read
  pull-requests: write

jobs:
  ci:
    name: Run CI in toolkit image
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      TF_IN_AUTOMATION: true
      TERRAGRUNT_NON_INTERACTIVE: true
      CHECKOV_ENABLE_LOGGING: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set image tag
        id: img
        run: echo "tag=ci-toolkit:${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: Build toolkit image
        run: docker build -t "${{ steps.img.outputs.tag }}" .

      - name: Run make ci inside container
        run: |
          docker run --rm \
            -e AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY \
            -e AWS_DEFAULT_REGION \
            -e TF_IN_AUTOMATION \
            -e TERRAGRUNT_NON_INTERACTIVE \
            -e CHECKOV_ENABLE_LOGGING \
            -v "${GITHUB_WORKSPACE}:/workspace" \
            -w /workspace \
            "${{ steps.img.outputs.tag }}" \
            bash -lc 'make ci'

      - name: Upload plan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plans
          path: .ci/plan/*.txt
          if-no-files-found: ignore
          retention-days: 7

      - name: Comment plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = '.ci/plan';
            let body = '## OpenTofu/Terragrunt Plan\n\n';

            if (!fs.existsSync(path)) {
              body += '_No plan files found (did the plan step run?)_';
            } else {
              const files = fs.readdirSync(path).filter(f => f.endsWith('.txt')).sort();
              if (files.length === 0) {
                body += '_No plan files found (did the plan step run?)_';
              } else {
                for (const f of files) {
                  const env = f.replace(/^plan-/, '').replace(/\.txt$/, '');
                  let content = fs.readFileSync(`${path}/${f}`, 'utf8');
                  // Keep comments readable: hard-cap huge output
                  const MAX = 65000;
                  if (content.length > MAX) {
                    content = content.slice(0, MAX) + '\n...[truncated]';
                  }
                  body += `<details><summary><strong>${env}</strong></summary>\n\n`;
                  body += '```diff\n' + content + '\n```\n';
                  body += '</details>\n\n';
                }
              }
            }

            // Find an existing bot comment to update (keeps PR tidy)
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const comments = await github.rest.issues.listComments({ owner, repo, issue_number, per_page: 100 });
            const marker = '<!-- plan-comment -->';
            const existing = comments.data.find(c => c.user.type === 'Bot' && c.body && c.body.includes(marker));
            const finalBody = `${marker}\n${body}`;

            if (existing) {
              await github.rest.issues.updateComment({
                owner, repo,
                comment_id: existing.id,
                body: finalBody
              });
            } else {
              await github.rest.issues.createComment({
                owner, repo, issue_number,
                body: finalBody
              });
            }

