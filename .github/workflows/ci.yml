# -----------------------------------------------------------------------------
# CI/CD WORKFLOW
# -----------------------------------------------------------------------------
# Pull Request: Run CI checks (format, validate, test, plan) and cost estimate
# Merge to main: Same as PR, then WAIT FOR APPROVAL before apply
#
# SETUP REQUIRED REVIEWERS:
#   1. Go to repo Settings â†’ Environments
#   2. Create environment named "production"
#   3. Add required reviewers (at least 1)
#   4. Save - apply job will now wait for approval before running
# -----------------------------------------------------------------------------

name: CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
  TF_IN_AUTOMATION: true

jobs:
  # ---------------------------------------------------------------------------
  # CI + PLAN + COST (runs on PR and push to main)
  # ---------------------------------------------------------------------------
  ci-plan-cost:
    name: CI + Plan + Cost
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t helium-ci:latest .

      - name: Run CI checks (includes plan)
        run: |
          docker run --rm \
            -e AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY \
            -e AWS_DEFAULT_REGION \
            -v $(pwd):/workspace \
            -w /workspace \
            helium-ci:latest \
            bash -c 'git config --global --add safe.directory /workspace && make ci'

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plans-and-costs
          path: .ci/
          retention-days: 7

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read plan
            const planPath = '.ci/plan/plan-production.txt';
            const plan = fs.existsSync(planPath)
              ? fs.readFileSync(planPath, 'utf8').slice(0, 60000)
              : 'Plan not found';

            // Read cost
            const costPath = '.ci/cost.txt';
            const cost = fs.existsSync(costPath)
              ? fs.readFileSync(costPath, 'utf8').slice(0, 5000)
              : 'Cost estimate not found';

            const body = `## ðŸ“‹ Terraform Plan\n\n<details><summary>View plan</summary>\n\n\`\`\`diff\n${plan}\n\`\`\`\n</details>\n\n## ðŸ’° Cost Estimate\n\n\`\`\`\n${cost}\n\`\`\``;

            const marker = '<!-- terragrunt-results -->';
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;

            const comments = await github.rest.issues.listComments({
              owner, repo, issue_number
            });

            const existing = comments.data.find(c => c.body && c.body.includes(marker));
            const finalBody = `${marker}\n${body}`;

            if (existing) {
              await github.rest.issues.updateComment({
                owner, repo, comment_id: existing.id, body: finalBody
              });
            } else {
              await github.rest.issues.createComment({
                owner, repo, issue_number, body: finalBody
              });
            }

  # ---------------------------------------------------------------------------
  # APPLY (only runs on merge to main, requires manual approval)
  # COMMENTED OUT - uncomment when ready to enable auto-apply
  # ---------------------------------------------------------------------------
  # apply:
  #   name: Apply Infrastructure
  #   runs-on: ubuntu-latest
  #   needs: ci-plan-cost
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   environment:
  #     name: production
  #
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #
  #     - name: Build Docker image
  #       run: docker build -t helium-ci:latest .
  #
  #     - name: Apply infrastructure
  #       run: |
  #         docker run --rm \
  #           -e AWS_ACCESS_KEY_ID \
  #           -e AWS_SECRET_ACCESS_KEY \
  #           -e AWS_DEFAULT_REGION \
  #           -v $(pwd):/workspace \
  #           -w /workspace \
  #           helium-ci:latest \
  #           bash -c 'git config --global --add safe.directory /workspace && cd production && terragrunt run --all -- apply -auto-approve'
